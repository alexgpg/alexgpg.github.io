---
layout: post
title:  "kill -9 и TCP-соединение"
date:   2017-09-4 00:23:34
categories: posts
---

Или почему kill -9 --- это плохой способ эмулировать сбои сети или приложения.

**TL;DR** kill -9 вызывает штатное закрытие TCP-соединения с полноценным обменом
пакетами и это не отличить от корректного завершения соединения через close().
Используйте iptables если хотите проверить честно.

Здесь рассматривается Linux.

Как проверить, что ваше сетевое приложение корректно обрабатывает отказ клиента/сервера/реплики/etc?
Одной из первых идей обычно приходит идея использовать kill -9 для эмуляции отказа второй стороны.
Грохаем приложение и смотрим насколько корректно переживают его внезапную смерть приложения, соединенные
с ним через TCP-соединение(клиенты/сервер/реплика).

Однако у этого способа есть большая проблема. Так проверяется не то что нужно,
а слишком мягкий случай. Протестировав так, вы скорее всего обнаружите,
что приложение корректно и быстро отрабатывает отказ. При этом за проверкой
окажутся реальные отказы, которые могут случиться(и случаются) в реальной жизни
и сети такие как потеря пакетов. И обработка таких отказов проходит не столь
гладко. И вот почему.

Дело в том, что по факту TCP-соединением управляет не приложение,
а операционная система. И завершение приложения не означает
моментальное прекращение жизни соединения.
TCP-соединение - это ресурс ОС и она занимается его освобождением.
И в данном случае делает это очень корректно.

## Проверка на практике

Запускаем наш сервер

```
host-1$ strace nc -4 -l 4444
```

Запускаем наш клиент

```
host-2$ strace telnet -4 localhost 4444
```

Мониторим трафик

```
host-2$ sudo tcpdump dst or src port 5555
```

```
host-1$ sudo pkill -9 nc
```

Обмен пакетами

~~~
IP host-1.5555  > host-2.44334: Flags [F.], seq 7, ack 1, win 227, options [nop,nop,TS val 1837828044 ecr 1575640942], length 0
IP host-2.44334 > host-1.5555:  Flags [F.], seq 1, ack 8, win 229, options [nop,nop,TS val 1575653507 ecr 1837828044], length 0
IP host-1.5555  > host-2.44334: Flags [.], ack 2, win 227, options [nop,nop,TS val 1837828045 ecr 1575653507], length 0
~~~
 
Видим, что идет полноценный обмен пакетами. FIN+ACK, FIN+ACK, ACK. Даже не RST. 
Т.е. даже в дампе трафика с сервера мы не увидим чего-то подозрительного,
что можно было бы принять за проблему. Обычное корректное завершение соединения.

strace запущен и можно увидеть, что _приложение_ ничего не пытается закрыть,
процесс честно убит ОС.

Т.е. соединение завершается штатно и для другой стороны выглядит неотличимо
от хорошего завершения. Несмотря на то, что приложение уже не работает,
обмен данными происходит, т.к. за TCP сокет отвечает ОС, а не приложение.

## Итог

Проверка таким методом мало отличается от штатного корректного завершения.
Неотличимо для соединения с другой стороны, и даже в дампе такие же пакеты.
Безусловно, приложение должно уметь корректно обрабатывать такой случай, но реальные
проблемы в сети хуже. Например пакеты могут просто перестать ходить совсем.
И проверять на такие сбои тоже нужно. Например использовать для тестирования iptables для того
чтобы эмулировать полную потерю пакетов. Обработает ли ваше приложение такой случай?
Возможно вы удивитесь :)

## P.S. Как это делает ядро Linux

Здесь разбор того, что делает ядро при закрытии приложения и как это приводит
к корректному завершению соединения.

Это цепочка вызовов при kill

 * [kernel/exit.c: void __noreturn do_exit(long code)](http://elixir.free-electrons.com/linux/v4.12.4/source/kernel/exit.c#L776)

 * [fs/file.c: void exit_files(struct task_struct *tsk)](http://elixir.free-electrons.com/linux/v4.12.4/source/fs/file.c#L455)

 * [fs/file.c: static struct fdtable *close_files(struct files_struct * files)](http://elixir.free-electrons.com/linux/v4.12.4/source/fs/file.c#L386)

 * [fs/open.c: int filp_close(struct file *filp, fl_owner_t id)](http://elixir.free-electrons.com/linux/v4.12.4/source/fs/open.c#L1122)

 * [fs/file_table.c: void fput(struct file *file)](http://elixir.free-electrons.com/linux/v4.12.4/source/fs/file_table.c#L265)

 * [fs/file_table.c: static void ____fput(struct callback_head *work)](http://elixir.free-electrons.com/linux/v4.12.4/source/fs/file_table.c#L243)

 * [fs/file_table.c: static void __fput(struct file *file)](http://elixir.free-electrons.com/linux/v4.12.4/source/fs/file_table.c#L187)

 * [fs/file_table.c: file->f_op->release(inode, file)](http://elixir.free-electrons.com/linux/v4.12.4/source/fs/file_table.c#L209) == 
   [net/socket.c: static int sock_close(struct inode *inode, struct file *filp)]()

 * [net/socket.c: void sock_release(struct socket *sock)](http://elixir.free-electrons.com/linux/v4.12.4/source/net/socket.c#L592)

 * [net/socket.c: sock->ops->release(sock)](http://elixir.free-electrons.com/linux/v4.12.4/source/net/socket.c#L597) == 
   [net/ipv4/af_inet.c: int inet_release(struct socket *sock)](http://elixir.free-electrons.com/linux/v4.12.4/source/net/ipv4/af_inet.c#L403)

 * [net/ipv4/af_inet.c: sk->sk_prot->close(sk, timeout)](http://elixir.free-electrons.com/linux/v4.12.4/source/net/ipv4/af_inet.c#L425) == 
   [net/ipv4/tcp.c: void tcp_close(struct sock *sk, long timeout)](http://elixir.free-electrons.com/linux/v4.12.4/source/net/ipv4/tcp.c#L2089)

А это цепочка вызовов при close
 
 * [fs/open.c: SYSCALL_DEFINE1(close, unsigned int, fd)](http://elixir.free-electrons.com/linux/v4.12.4/source/fs/open.c#L1149)
 
 * [fs/file.c: int __close_fd(struct files_struct *files, unsigned fd)](http://elixir.free-electrons.com/linux/v4.12.4/source/fs/file.c#L635)
 
 * [fs/open.c: int filp_close(struct file *filp, fl_owner_t id)](http://elixir.free-electrons.com/linux/v4.12.4/source/fs/open.c#L1122)

 * Далее она такая же как и в случае kill

## MacOS

На маке ситуация похожая, только происходит 4-way закрытие.

## Ссылки

 1. [Stack Overflow: Where does Linux kernel do process and TCP connections cleanup after process dies?](
    https://stackoverflow.com/questions/4438146/where-does-linux-kernel-do-process-and-tcp-connections-cleanup-after-process-die)
    [(Backup)](http://www.peeep.us/9d5a21b6)

